package Algorithms.Sorting;

import org.junit.Assert;
import org.junit.Test;

import java.util.Arrays;
import java.util.Comparator;
import java.util.Objects;
import java.util.Random;

/**
 * Tests for Gatech CS1332 Spring 2018 HW8
 *
 * No these were not written manually
 * I know it fails checkstyle, but I do not want to spend the time to fix it
 * Just don't run checkstyle on this file
 *
 * Generator for these tests: https://github.gatech.edu/gist/ssavelyev3/7807786b6764f72c8159e346f0925daa
 * WARNING: The generator is not written in Java
 *
 * @author sergeys
 * @version 1
 */
public class SS1332HW8Tests {
    public static final long TIMEOUT = 200L;

    public static final int[] bigNumbers = new int[] {2147483609,2147483644,2147483633,-2147483628,2147483643,2147483604,-2147483603,2147483620,-2147483630,2147483646,2147483613,2147483626,-2147483621,-2147483624,-2147483622,-2147483616,-2147483600,-2147483626,-2147483602,2147483605,-2147483619,-2147483613,2147483617,2147483601,2147483611,-2147483629,2147483615,2147483647,-2147483604,-2147483610,-2147483643,2147483622,2147483612,-2147483634,2147483623,2147483598,-2147483611,2147483630,-2147483606,-2147483620,2147483624,2147483645,-2147483612,2147483641,-2147483615,2147483628,-2147483608,-2147483633,-2147483639,-2147483647,-2147483648,-2147483644,-2147483645,-2147483635,2147483608,-2147483617,2147483602,2147483607,-2147483631,2147483625,2147483614,-2147483640,-2147483636,2147483600,-2147483627,-2147483637,2147483618,2147483631,2147483621,2147483640,2147483638,-2147483638,-2147483623,2147483636,2147483634,-2147483607,2147483629,2147483635,2147483610,2147483619,2147483603,2147483599,-2147483632,2147483639,-2147483625,-2147483618,2147483637,2147483627,-2147483609,2147483632,-2147483614,-2147483642,-2147483641,-2147483646,-2147483605,2147483606,-2147483599,2147483616,-2147483601,2147483642};
    public static final int[] bigSorted  = new int[] {-2147483648,-2147483647,-2147483646,-2147483645,-2147483644,-2147483643,-2147483642,-2147483641,-2147483640,-2147483639,-2147483638,-2147483637,-2147483636,-2147483635,-2147483634,-2147483633,-2147483632,-2147483631,-2147483630,-2147483629,-2147483628,-2147483627,-2147483626,-2147483625,-2147483624,-2147483623,-2147483622,-2147483621,-2147483620,-2147483619,-2147483618,-2147483617,-2147483616,-2147483615,-2147483614,-2147483613,-2147483612,-2147483611,-2147483610,-2147483609,-2147483608,-2147483607,-2147483606,-2147483605,-2147483604,-2147483603,-2147483602,-2147483601,-2147483600,-2147483599,2147483598,2147483599,2147483600,2147483601,2147483602,2147483603,2147483604,2147483605,2147483606,2147483607,2147483608,2147483609,2147483610,2147483611,2147483612,2147483613,2147483614,2147483615,2147483616,2147483617,2147483618,2147483619,2147483620,2147483621,2147483622,2147483623,2147483624,2147483625,2147483626,2147483627,2147483628,2147483629,2147483630,2147483631,2147483632,2147483633,2147483634,2147483635,2147483636,2147483637,2147483638,2147483639,2147483640,2147483641,2147483642,2147483643,2147483644,2147483645,2147483646,2147483647};
    public static final int[] sorted    = new int[] {-50,-50,-49,-48,-47,-47,-46,-45,-44,-44,-43,-42,-41,-41,-40,-39,-38,-38,-37,-36,-35,-35,-34,-33,-32,-32,-31,-30,-29,-29,-28,-27,-26,-26,-25,-24,-23,-23,-22,-21,-20,-20,-19,-18,-17,-17,-16,-15,-14,-14,-13,-12,-11,-11,-10,-9,-8,-8,-7,-6,-5,-5,-4,-3,-2,-2,-1,0,1,1,2,3,4,4,5,6,7,7,8,9,10,10,11,12,13,13,14,15,16,16,17,18,19,19,20,21,22,22,23,24};
    public static final int[] shuffled1 = new int[] {-45,18,-38,-40,-17,-39,-5,-12,15,-2,2,-29,-11,-28,-9,-42,-26,-33,-31,1,-35,-48,-7,-8,23,4,-25,21,-23,16,-15,13,5,-26,-41,-38,-50,1,-32,9,-16,-30,-36,-47,-14,-24,-13,19,-3,-4,-18,4,3,-32,22,7,17,-8,-41,24,-21,-17,22,-23,-1,16,-20,-34,-47,13,-20,-14,20,-44,-11,-43,-22,-5,-50,10,-37,-19,-29,19,-10,-27,12,-2,7,-6,8,-44,0,10,-49,6,-35,-46,14,11};
    public static final int[] shuffled2 = new int[] {20,-45,-26,-50,-47,-6,21,6,-13,-3,-50,-5,-28,-43,-5,-25,-20,-18,4,-21,3,-46,14,19,-29,16,-41,5,-27,-11,-23,22,-47,22,1,7,13,-48,23,2,-11,-17,-20,-26,16,4,-31,-9,-14,-42,9,-24,17,-34,-2,-14,-44,-19,-30,-7,-38,1,-33,-32,-12,-16,-8,10,10,12,-2,-38,-37,-39,-32,24,-49,-29,-22,-41,8,-17,-4,-1,15,-36,13,7,11,-10,0,-35,-15,-40,-23,19,-44,-35,18,-8};
    public static final int[] shuffled3 = new int[] {-34,-35,-29,-9,-37,15,-18,-32,-42,-15,-19,-44,-11,-1,14,-31,17,-47,7,11,7,12,9,-22,13,23,-6,-3,-16,-23,-28,-14,-47,-35,2,-5,-21,20,-41,-2,-17,4,-29,-33,19,-23,-44,19,22,-38,-41,5,-32,-11,-10,24,-45,-36,10,-46,4,-39,-48,10,-5,-8,-20,-13,-27,1,-25,18,8,-14,-26,0,22,6,-2,13,-38,-24,-8,1,-7,-26,-17,-49,-40,-50,-20,16,-50,-4,-12,-43,3,-30,16,21};
    public static final int[] shuffled4 = new int[] {-19,20,22,4,-44,-5,-29,1,-15,18,-13,-36,-21,4,-14,8,-35,-34,23,15,-14,2,12,-23,-33,-38,-2,21,-25,-7,-48,-17,-32,-50,-17,-9,-41,-41,-39,-10,-26,13,3,-49,-29,-30,16,-44,-24,-28,-11,24,-47,-27,-4,16,10,-43,10,-31,-3,-32,-26,-35,-16,0,13,-46,-22,17,-8,-38,22,11,-40,-42,9,-5,7,-2,-23,-6,-20,7,-18,-11,19,-47,19,6,14,-1,5,-12,-8,1,-37,-45,-20,-50};
    public static final int[] shuffled5 = new int[] {-11,-26,-39,2,-37,19,-5,1,-15,-41,-7,-50,-19,15,6,-2,23,-36,-29,8,7,-2,-27,22,-24,-22,-35,-30,9,-12,-41,14,-45,1,-21,10,-40,3,-25,-20,-34,21,-13,22,16,-29,-14,-3,12,-23,-20,-46,-18,4,17,-44,-11,-32,-9,10,-17,-28,-6,20,24,-14,-50,-31,-44,4,-8,-47,-4,13,-10,0,-32,-43,-5,11,-42,-26,7,5,19,-16,13,-23,-48,-38,-38,-33,-1,-47,-35,-49,-8,18,16,-17};
    public static final SortingObj[] sortedObj    = new SortingObj[] {new SortingObj(-50),new SortingObj(-50),new SortingObj(-49),new SortingObj(-48),new SortingObj(-47),new SortingObj(-47),new SortingObj(-46),new SortingObj(-45),new SortingObj(-44),new SortingObj(-44),new SortingObj(-43),new SortingObj(-42),new SortingObj(-41),new SortingObj(-41),new SortingObj(-40),new SortingObj(-39),new SortingObj(-38),new SortingObj(-38),new SortingObj(-37),new SortingObj(-36),new SortingObj(-35),new SortingObj(-35),new SortingObj(-34),new SortingObj(-33),new SortingObj(-32),new SortingObj(-32),new SortingObj(-31),new SortingObj(-30),new SortingObj(-29),new SortingObj(-29),new SortingObj(-28),new SortingObj(-27),new SortingObj(-26),new SortingObj(-26),new SortingObj(-25),new SortingObj(-24),new SortingObj(-23),new SortingObj(-23),new SortingObj(-22),new SortingObj(-21),new SortingObj(-20),new SortingObj(-20),new SortingObj(-19),new SortingObj(-18),new SortingObj(-17),new SortingObj(-17),new SortingObj(-16),new SortingObj(-15),new SortingObj(-14),new SortingObj(-14),new SortingObj(-13),new SortingObj(-12),new SortingObj(-11),new SortingObj(-11),new SortingObj(-10),new SortingObj(-9),new SortingObj(-8),new SortingObj(-8),new SortingObj(-7),new SortingObj(-6),new SortingObj(-5),new SortingObj(-5),new SortingObj(-4),new SortingObj(-3),new SortingObj(-2),new SortingObj(-2),new SortingObj(-1),new SortingObj(0),new SortingObj(1),new SortingObj(1),new SortingObj(2),new SortingObj(3),new SortingObj(4),new SortingObj(4),new SortingObj(5),new SortingObj(6),new SortingObj(7),new SortingObj(7),new SortingObj(8),new SortingObj(9),new SortingObj(10),new SortingObj(10),new SortingObj(11),new SortingObj(12),new SortingObj(13),new SortingObj(13),new SortingObj(14),new SortingObj(15),new SortingObj(16),new SortingObj(16),new SortingObj(17),new SortingObj(18),new SortingObj(19),new SortingObj(19),new SortingObj(20),new SortingObj(21),new SortingObj(22),new SortingObj(22),new SortingObj(23),new SortingObj(24)};
    public static final SortingObj[] shuffled1Obj = new SortingObj[] {new SortingObj(-45),new SortingObj(18),new SortingObj(-38),new SortingObj(-40),new SortingObj(-17),new SortingObj(-39),new SortingObj(-5),new SortingObj(-12),new SortingObj(15),new SortingObj(-2),new SortingObj(2),new SortingObj(-29),new SortingObj(-11),new SortingObj(-28),new SortingObj(-9),new SortingObj(-42),new SortingObj(-26),new SortingObj(-33),new SortingObj(-31),new SortingObj(1),new SortingObj(-35),new SortingObj(-48),new SortingObj(-7),new SortingObj(-8),new SortingObj(23),new SortingObj(4),new SortingObj(-25),new SortingObj(21),new SortingObj(-23),new SortingObj(16),new SortingObj(-15),new SortingObj(13),new SortingObj(5),new SortingObj(-26),new SortingObj(-41),new SortingObj(-38),new SortingObj(-50),new SortingObj(1),new SortingObj(-32),new SortingObj(9),new SortingObj(-16),new SortingObj(-30),new SortingObj(-36),new SortingObj(-47),new SortingObj(-14),new SortingObj(-24),new SortingObj(-13),new SortingObj(19),new SortingObj(-3),new SortingObj(-4),new SortingObj(-18),new SortingObj(4),new SortingObj(3),new SortingObj(-32),new SortingObj(22),new SortingObj(7),new SortingObj(17),new SortingObj(-8),new SortingObj(-41),new SortingObj(24),new SortingObj(-21),new SortingObj(-17),new SortingObj(22),new SortingObj(-23),new SortingObj(-1),new SortingObj(16),new SortingObj(-20),new SortingObj(-34),new SortingObj(-47),new SortingObj(13),new SortingObj(-20),new SortingObj(-14),new SortingObj(20),new SortingObj(-44),new SortingObj(-11),new SortingObj(-43),new SortingObj(-22),new SortingObj(-5),new SortingObj(-50),new SortingObj(10),new SortingObj(-37),new SortingObj(-19),new SortingObj(-29),new SortingObj(19),new SortingObj(-10),new SortingObj(-27),new SortingObj(12),new SortingObj(-2),new SortingObj(7),new SortingObj(-6),new SortingObj(8),new SortingObj(-44),new SortingObj(0),new SortingObj(10),new SortingObj(-49),new SortingObj(6),new SortingObj(-35),new SortingObj(-46),new SortingObj(14),new SortingObj(11)};
    public static final SortingObj[] shuffled2Obj = new SortingObj[] {new SortingObj(20),new SortingObj(-45),new SortingObj(-26),new SortingObj(-50),new SortingObj(-47),new SortingObj(-6),new SortingObj(21),new SortingObj(6),new SortingObj(-13),new SortingObj(-3),new SortingObj(-50),new SortingObj(-5),new SortingObj(-28),new SortingObj(-43),new SortingObj(-5),new SortingObj(-25),new SortingObj(-20),new SortingObj(-18),new SortingObj(4),new SortingObj(-21),new SortingObj(3),new SortingObj(-46),new SortingObj(14),new SortingObj(19),new SortingObj(-29),new SortingObj(16),new SortingObj(-41),new SortingObj(5),new SortingObj(-27),new SortingObj(-11),new SortingObj(-23),new SortingObj(22),new SortingObj(-47),new SortingObj(22),new SortingObj(1),new SortingObj(7),new SortingObj(13),new SortingObj(-48),new SortingObj(23),new SortingObj(2),new SortingObj(-11),new SortingObj(-17),new SortingObj(-20),new SortingObj(-26),new SortingObj(16),new SortingObj(4),new SortingObj(-31),new SortingObj(-9),new SortingObj(-14),new SortingObj(-42),new SortingObj(9),new SortingObj(-24),new SortingObj(17),new SortingObj(-34),new SortingObj(-2),new SortingObj(-14),new SortingObj(-44),new SortingObj(-19),new SortingObj(-30),new SortingObj(-7),new SortingObj(-38),new SortingObj(1),new SortingObj(-33),new SortingObj(-32),new SortingObj(-12),new SortingObj(-16),new SortingObj(-8),new SortingObj(10),new SortingObj(10),new SortingObj(12),new SortingObj(-2),new SortingObj(-38),new SortingObj(-37),new SortingObj(-39),new SortingObj(-32),new SortingObj(24),new SortingObj(-49),new SortingObj(-29),new SortingObj(-22),new SortingObj(-41),new SortingObj(8),new SortingObj(-17),new SortingObj(-4),new SortingObj(-1),new SortingObj(15),new SortingObj(-36),new SortingObj(13),new SortingObj(7),new SortingObj(11),new SortingObj(-10),new SortingObj(0),new SortingObj(-35),new SortingObj(-15),new SortingObj(-40),new SortingObj(-23),new SortingObj(19),new SortingObj(-44),new SortingObj(-35),new SortingObj(18),new SortingObj(-8)};
    public static final SortingObj[] shuffled3Obj = new SortingObj[] {new SortingObj(-34),new SortingObj(-35),new SortingObj(-29),new SortingObj(-9),new SortingObj(-37),new SortingObj(15),new SortingObj(-18),new SortingObj(-32),new SortingObj(-42),new SortingObj(-15),new SortingObj(-19),new SortingObj(-44),new SortingObj(-11),new SortingObj(-1),new SortingObj(14),new SortingObj(-31),new SortingObj(17),new SortingObj(-47),new SortingObj(7),new SortingObj(11),new SortingObj(7),new SortingObj(12),new SortingObj(9),new SortingObj(-22),new SortingObj(13),new SortingObj(23),new SortingObj(-6),new SortingObj(-3),new SortingObj(-16),new SortingObj(-23),new SortingObj(-28),new SortingObj(-14),new SortingObj(-47),new SortingObj(-35),new SortingObj(2),new SortingObj(-5),new SortingObj(-21),new SortingObj(20),new SortingObj(-41),new SortingObj(-2),new SortingObj(-17),new SortingObj(4),new SortingObj(-29),new SortingObj(-33),new SortingObj(19),new SortingObj(-23),new SortingObj(-44),new SortingObj(19),new SortingObj(22),new SortingObj(-38),new SortingObj(-41),new SortingObj(5),new SortingObj(-32),new SortingObj(-11),new SortingObj(-10),new SortingObj(24),new SortingObj(-45),new SortingObj(-36),new SortingObj(10),new SortingObj(-46),new SortingObj(4),new SortingObj(-39),new SortingObj(-48),new SortingObj(10),new SortingObj(-5),new SortingObj(-8),new SortingObj(-20),new SortingObj(-13),new SortingObj(-27),new SortingObj(1),new SortingObj(-25),new SortingObj(18),new SortingObj(8),new SortingObj(-14),new SortingObj(-26),new SortingObj(0),new SortingObj(22),new SortingObj(6),new SortingObj(-2),new SortingObj(13),new SortingObj(-38),new SortingObj(-24),new SortingObj(-8),new SortingObj(1),new SortingObj(-7),new SortingObj(-26),new SortingObj(-17),new SortingObj(-49),new SortingObj(-40),new SortingObj(-50),new SortingObj(-20),new SortingObj(16),new SortingObj(-50),new SortingObj(-4),new SortingObj(-12),new SortingObj(-43),new SortingObj(3),new SortingObj(-30),new SortingObj(16),new SortingObj(21)};
    public static final SortingObj[] shuffled4Obj = new SortingObj[] {new SortingObj(-19),new SortingObj(20),new SortingObj(22),new SortingObj(4),new SortingObj(-44),new SortingObj(-5),new SortingObj(-29),new SortingObj(1),new SortingObj(-15),new SortingObj(18),new SortingObj(-13),new SortingObj(-36),new SortingObj(-21),new SortingObj(4),new SortingObj(-14),new SortingObj(8),new SortingObj(-35),new SortingObj(-34),new SortingObj(23),new SortingObj(15),new SortingObj(-14),new SortingObj(2),new SortingObj(12),new SortingObj(-23),new SortingObj(-33),new SortingObj(-38),new SortingObj(-2),new SortingObj(21),new SortingObj(-25),new SortingObj(-7),new SortingObj(-48),new SortingObj(-17),new SortingObj(-32),new SortingObj(-50),new SortingObj(-17),new SortingObj(-9),new SortingObj(-41),new SortingObj(-41),new SortingObj(-39),new SortingObj(-10),new SortingObj(-26),new SortingObj(13),new SortingObj(3),new SortingObj(-49),new SortingObj(-29),new SortingObj(-30),new SortingObj(16),new SortingObj(-44),new SortingObj(-24),new SortingObj(-28),new SortingObj(-11),new SortingObj(24),new SortingObj(-47),new SortingObj(-27),new SortingObj(-4),new SortingObj(16),new SortingObj(10),new SortingObj(-43),new SortingObj(10),new SortingObj(-31),new SortingObj(-3),new SortingObj(-32),new SortingObj(-26),new SortingObj(-35),new SortingObj(-16),new SortingObj(0),new SortingObj(13),new SortingObj(-46),new SortingObj(-22),new SortingObj(17),new SortingObj(-8),new SortingObj(-38),new SortingObj(22),new SortingObj(11),new SortingObj(-40),new SortingObj(-42),new SortingObj(9),new SortingObj(-5),new SortingObj(7),new SortingObj(-2),new SortingObj(-23),new SortingObj(-6),new SortingObj(-20),new SortingObj(7),new SortingObj(-18),new SortingObj(-11),new SortingObj(19),new SortingObj(-47),new SortingObj(19),new SortingObj(6),new SortingObj(14),new SortingObj(-1),new SortingObj(5),new SortingObj(-12),new SortingObj(-8),new SortingObj(1),new SortingObj(-37),new SortingObj(-45),new SortingObj(-20),new SortingObj(-50)};
    public static final SortingObj[] shuffled5Obj = new SortingObj[] {new SortingObj(-11),new SortingObj(-26),new SortingObj(-39),new SortingObj(2),new SortingObj(-37),new SortingObj(19),new SortingObj(-5),new SortingObj(1),new SortingObj(-15),new SortingObj(-41),new SortingObj(-7),new SortingObj(-50),new SortingObj(-19),new SortingObj(15),new SortingObj(6),new SortingObj(-2),new SortingObj(23),new SortingObj(-36),new SortingObj(-29),new SortingObj(8),new SortingObj(7),new SortingObj(-2),new SortingObj(-27),new SortingObj(22),new SortingObj(-24),new SortingObj(-22),new SortingObj(-35),new SortingObj(-30),new SortingObj(9),new SortingObj(-12),new SortingObj(-41),new SortingObj(14),new SortingObj(-45),new SortingObj(1),new SortingObj(-21),new SortingObj(10),new SortingObj(-40),new SortingObj(3),new SortingObj(-25),new SortingObj(-20),new SortingObj(-34),new SortingObj(21),new SortingObj(-13),new SortingObj(22),new SortingObj(16),new SortingObj(-29),new SortingObj(-14),new SortingObj(-3),new SortingObj(12),new SortingObj(-23),new SortingObj(-20),new SortingObj(-46),new SortingObj(-18),new SortingObj(4),new SortingObj(17),new SortingObj(-44),new SortingObj(-11),new SortingObj(-32),new SortingObj(-9),new SortingObj(10),new SortingObj(-17),new SortingObj(-28),new SortingObj(-6),new SortingObj(20),new SortingObj(24),new SortingObj(-14),new SortingObj(-50),new SortingObj(-31),new SortingObj(-44),new SortingObj(4),new SortingObj(-8),new SortingObj(-47),new SortingObj(-4),new SortingObj(13),new SortingObj(-10),new SortingObj(0),new SortingObj(-32),new SortingObj(-43),new SortingObj(-5),new SortingObj(11),new SortingObj(-42),new SortingObj(-26),new SortingObj(7),new SortingObj(5),new SortingObj(19),new SortingObj(-16),new SortingObj(13),new SortingObj(-23),new SortingObj(-48),new SortingObj(-38),new SortingObj(-38),new SortingObj(-33),new SortingObj(-1),new SortingObj(-47),new SortingObj(-35),new SortingObj(-49),new SortingObj(-8),new SortingObj(18),new SortingObj(16),new SortingObj(-17)};
    public static final StableSortingObj[] shuffled1Stable = new StableSortingObj[] {new StableSortingObj(-45),new StableSortingObj(18),new StableSortingObj(-38),new StableSortingObj(-40),new StableSortingObj(-17),new StableSortingObj(-39),new StableSortingObj(-5),new StableSortingObj(-12),new StableSortingObj(15),new StableSortingObj(-2),new StableSortingObj(2),new StableSortingObj(-29),new StableSortingObj(-11),new StableSortingObj(-28),new StableSortingObj(-9),new StableSortingObj(-42),new StableSortingObj(-26),new StableSortingObj(-33),new StableSortingObj(-31),new StableSortingObj(1),new StableSortingObj(-35),new StableSortingObj(-48),new StableSortingObj(-7),new StableSortingObj(-8),new StableSortingObj(23),new StableSortingObj(4),new StableSortingObj(-25),new StableSortingObj(21),new StableSortingObj(-23),new StableSortingObj(16),new StableSortingObj(-15),new StableSortingObj(13),new StableSortingObj(5),new StableSortingObj(-26),new StableSortingObj(-41),new StableSortingObj(-38),new StableSortingObj(-50),new StableSortingObj(1),new StableSortingObj(-32),new StableSortingObj(9),new StableSortingObj(-16),new StableSortingObj(-30),new StableSortingObj(-36),new StableSortingObj(-47),new StableSortingObj(-14),new StableSortingObj(-24),new StableSortingObj(-13),new StableSortingObj(19),new StableSortingObj(-3),new StableSortingObj(-4),new StableSortingObj(-18),new StableSortingObj(4),new StableSortingObj(3),new StableSortingObj(-32),new StableSortingObj(22),new StableSortingObj(7),new StableSortingObj(17),new StableSortingObj(-8),new StableSortingObj(-41),new StableSortingObj(24),new StableSortingObj(-21),new StableSortingObj(-17),new StableSortingObj(22),new StableSortingObj(-23),new StableSortingObj(-1),new StableSortingObj(16),new StableSortingObj(-20),new StableSortingObj(-34),new StableSortingObj(-47),new StableSortingObj(13),new StableSortingObj(-20),new StableSortingObj(-14),new StableSortingObj(20),new StableSortingObj(-44),new StableSortingObj(-11),new StableSortingObj(-43),new StableSortingObj(-22),new StableSortingObj(-5),new StableSortingObj(-50),new StableSortingObj(10),new StableSortingObj(-37),new StableSortingObj(-19),new StableSortingObj(-29),new StableSortingObj(19),new StableSortingObj(-10),new StableSortingObj(-27),new StableSortingObj(12),new StableSortingObj(-2),new StableSortingObj(7),new StableSortingObj(-6),new StableSortingObj(8),new StableSortingObj(-44),new StableSortingObj(0),new StableSortingObj(10),new StableSortingObj(-49),new StableSortingObj(6),new StableSortingObj(-35),new StableSortingObj(-46),new StableSortingObj(14),new StableSortingObj(11)};
    public static final StableSortingObj[] shuffled2Stable = new StableSortingObj[] {new StableSortingObj(20),new StableSortingObj(-45),new StableSortingObj(-26),new StableSortingObj(-50),new StableSortingObj(-47),new StableSortingObj(-6),new StableSortingObj(21),new StableSortingObj(6),new StableSortingObj(-13),new StableSortingObj(-3),new StableSortingObj(-50),new StableSortingObj(-5),new StableSortingObj(-28),new StableSortingObj(-43),new StableSortingObj(-5),new StableSortingObj(-25),new StableSortingObj(-20),new StableSortingObj(-18),new StableSortingObj(4),new StableSortingObj(-21),new StableSortingObj(3),new StableSortingObj(-46),new StableSortingObj(14),new StableSortingObj(19),new StableSortingObj(-29),new StableSortingObj(16),new StableSortingObj(-41),new StableSortingObj(5),new StableSortingObj(-27),new StableSortingObj(-11),new StableSortingObj(-23),new StableSortingObj(22),new StableSortingObj(-47),new StableSortingObj(22),new StableSortingObj(1),new StableSortingObj(7),new StableSortingObj(13),new StableSortingObj(-48),new StableSortingObj(23),new StableSortingObj(2),new StableSortingObj(-11),new StableSortingObj(-17),new StableSortingObj(-20),new StableSortingObj(-26),new StableSortingObj(16),new StableSortingObj(4),new StableSortingObj(-31),new StableSortingObj(-9),new StableSortingObj(-14),new StableSortingObj(-42),new StableSortingObj(9),new StableSortingObj(-24),new StableSortingObj(17),new StableSortingObj(-34),new StableSortingObj(-2),new StableSortingObj(-14),new StableSortingObj(-44),new StableSortingObj(-19),new StableSortingObj(-30),new StableSortingObj(-7),new StableSortingObj(-38),new StableSortingObj(1),new StableSortingObj(-33),new StableSortingObj(-32),new StableSortingObj(-12),new StableSortingObj(-16),new StableSortingObj(-8),new StableSortingObj(10),new StableSortingObj(10),new StableSortingObj(12),new StableSortingObj(-2),new StableSortingObj(-38),new StableSortingObj(-37),new StableSortingObj(-39),new StableSortingObj(-32),new StableSortingObj(24),new StableSortingObj(-49),new StableSortingObj(-29),new StableSortingObj(-22),new StableSortingObj(-41),new StableSortingObj(8),new StableSortingObj(-17),new StableSortingObj(-4),new StableSortingObj(-1),new StableSortingObj(15),new StableSortingObj(-36),new StableSortingObj(13),new StableSortingObj(7),new StableSortingObj(11),new StableSortingObj(-10),new StableSortingObj(0),new StableSortingObj(-35),new StableSortingObj(-15),new StableSortingObj(-40),new StableSortingObj(-23),new StableSortingObj(19),new StableSortingObj(-44),new StableSortingObj(-35),new StableSortingObj(18),new StableSortingObj(-8)};
    public static final StableSortingObj[] shuffled3Stable = new StableSortingObj[] {new StableSortingObj(-34),new StableSortingObj(-35),new StableSortingObj(-29),new StableSortingObj(-9),new StableSortingObj(-37),new StableSortingObj(15),new StableSortingObj(-18),new StableSortingObj(-32),new StableSortingObj(-42),new StableSortingObj(-15),new StableSortingObj(-19),new StableSortingObj(-44),new StableSortingObj(-11),new StableSortingObj(-1),new StableSortingObj(14),new StableSortingObj(-31),new StableSortingObj(17),new StableSortingObj(-47),new StableSortingObj(7),new StableSortingObj(11),new StableSortingObj(7),new StableSortingObj(12),new StableSortingObj(9),new StableSortingObj(-22),new StableSortingObj(13),new StableSortingObj(23),new StableSortingObj(-6),new StableSortingObj(-3),new StableSortingObj(-16),new StableSortingObj(-23),new StableSortingObj(-28),new StableSortingObj(-14),new StableSortingObj(-47),new StableSortingObj(-35),new StableSortingObj(2),new StableSortingObj(-5),new StableSortingObj(-21),new StableSortingObj(20),new StableSortingObj(-41),new StableSortingObj(-2),new StableSortingObj(-17),new StableSortingObj(4),new StableSortingObj(-29),new StableSortingObj(-33),new StableSortingObj(19),new StableSortingObj(-23),new StableSortingObj(-44),new StableSortingObj(19),new StableSortingObj(22),new StableSortingObj(-38),new StableSortingObj(-41),new StableSortingObj(5),new StableSortingObj(-32),new StableSortingObj(-11),new StableSortingObj(-10),new StableSortingObj(24),new StableSortingObj(-45),new StableSortingObj(-36),new StableSortingObj(10),new StableSortingObj(-46),new StableSortingObj(4),new StableSortingObj(-39),new StableSortingObj(-48),new StableSortingObj(10),new StableSortingObj(-5),new StableSortingObj(-8),new StableSortingObj(-20),new StableSortingObj(-13),new StableSortingObj(-27),new StableSortingObj(1),new StableSortingObj(-25),new StableSortingObj(18),new StableSortingObj(8),new StableSortingObj(-14),new StableSortingObj(-26),new StableSortingObj(0),new StableSortingObj(22),new StableSortingObj(6),new StableSortingObj(-2),new StableSortingObj(13),new StableSortingObj(-38),new StableSortingObj(-24),new StableSortingObj(-8),new StableSortingObj(1),new StableSortingObj(-7),new StableSortingObj(-26),new StableSortingObj(-17),new StableSortingObj(-49),new StableSortingObj(-40),new StableSortingObj(-50),new StableSortingObj(-20),new StableSortingObj(16),new StableSortingObj(-50),new StableSortingObj(-4),new StableSortingObj(-12),new StableSortingObj(-43),new StableSortingObj(3),new StableSortingObj(-30),new StableSortingObj(16),new StableSortingObj(21)};
    public static final StableSortingObj[] shuffled4Stable = new StableSortingObj[] {new StableSortingObj(-19),new StableSortingObj(20),new StableSortingObj(22),new StableSortingObj(4),new StableSortingObj(-44),new StableSortingObj(-5),new StableSortingObj(-29),new StableSortingObj(1),new StableSortingObj(-15),new StableSortingObj(18),new StableSortingObj(-13),new StableSortingObj(-36),new StableSortingObj(-21),new StableSortingObj(4),new StableSortingObj(-14),new StableSortingObj(8),new StableSortingObj(-35),new StableSortingObj(-34),new StableSortingObj(23),new StableSortingObj(15),new StableSortingObj(-14),new StableSortingObj(2),new StableSortingObj(12),new StableSortingObj(-23),new StableSortingObj(-33),new StableSortingObj(-38),new StableSortingObj(-2),new StableSortingObj(21),new StableSortingObj(-25),new StableSortingObj(-7),new StableSortingObj(-48),new StableSortingObj(-17),new StableSortingObj(-32),new StableSortingObj(-50),new StableSortingObj(-17),new StableSortingObj(-9),new StableSortingObj(-41),new StableSortingObj(-41),new StableSortingObj(-39),new StableSortingObj(-10),new StableSortingObj(-26),new StableSortingObj(13),new StableSortingObj(3),new StableSortingObj(-49),new StableSortingObj(-29),new StableSortingObj(-30),new StableSortingObj(16),new StableSortingObj(-44),new StableSortingObj(-24),new StableSortingObj(-28),new StableSortingObj(-11),new StableSortingObj(24),new StableSortingObj(-47),new StableSortingObj(-27),new StableSortingObj(-4),new StableSortingObj(16),new StableSortingObj(10),new StableSortingObj(-43),new StableSortingObj(10),new StableSortingObj(-31),new StableSortingObj(-3),new StableSortingObj(-32),new StableSortingObj(-26),new StableSortingObj(-35),new StableSortingObj(-16),new StableSortingObj(0),new StableSortingObj(13),new StableSortingObj(-46),new StableSortingObj(-22),new StableSortingObj(17),new StableSortingObj(-8),new StableSortingObj(-38),new StableSortingObj(22),new StableSortingObj(11),new StableSortingObj(-40),new StableSortingObj(-42),new StableSortingObj(9),new StableSortingObj(-5),new StableSortingObj(7),new StableSortingObj(-2),new StableSortingObj(-23),new StableSortingObj(-6),new StableSortingObj(-20),new StableSortingObj(7),new StableSortingObj(-18),new StableSortingObj(-11),new StableSortingObj(19),new StableSortingObj(-47),new StableSortingObj(19),new StableSortingObj(6),new StableSortingObj(14),new StableSortingObj(-1),new StableSortingObj(5),new StableSortingObj(-12),new StableSortingObj(-8),new StableSortingObj(1),new StableSortingObj(-37),new StableSortingObj(-45),new StableSortingObj(-20),new StableSortingObj(-50)};
    public static final StableSortingObj[] shuffled5Stable = new StableSortingObj[] {new StableSortingObj(-11),new StableSortingObj(-26),new StableSortingObj(-39),new StableSortingObj(2),new StableSortingObj(-37),new StableSortingObj(19),new StableSortingObj(-5),new StableSortingObj(1),new StableSortingObj(-15),new StableSortingObj(-41),new StableSortingObj(-7),new StableSortingObj(-50),new StableSortingObj(-19),new StableSortingObj(15),new StableSortingObj(6),new StableSortingObj(-2),new StableSortingObj(23),new StableSortingObj(-36),new StableSortingObj(-29),new StableSortingObj(8),new StableSortingObj(7),new StableSortingObj(-2),new StableSortingObj(-27),new StableSortingObj(22),new StableSortingObj(-24),new StableSortingObj(-22),new StableSortingObj(-35),new StableSortingObj(-30),new StableSortingObj(9),new StableSortingObj(-12),new StableSortingObj(-41),new StableSortingObj(14),new StableSortingObj(-45),new StableSortingObj(1),new StableSortingObj(-21),new StableSortingObj(10),new StableSortingObj(-40),new StableSortingObj(3),new StableSortingObj(-25),new StableSortingObj(-20),new StableSortingObj(-34),new StableSortingObj(21),new StableSortingObj(-13),new StableSortingObj(22),new StableSortingObj(16),new StableSortingObj(-29),new StableSortingObj(-14),new StableSortingObj(-3),new StableSortingObj(12),new StableSortingObj(-23),new StableSortingObj(-20),new StableSortingObj(-46),new StableSortingObj(-18),new StableSortingObj(4),new StableSortingObj(17),new StableSortingObj(-44),new StableSortingObj(-11),new StableSortingObj(-32),new StableSortingObj(-9),new StableSortingObj(10),new StableSortingObj(-17),new StableSortingObj(-28),new StableSortingObj(-6),new StableSortingObj(20),new StableSortingObj(24),new StableSortingObj(-14),new StableSortingObj(-50),new StableSortingObj(-31),new StableSortingObj(-44),new StableSortingObj(4),new StableSortingObj(-8),new StableSortingObj(-47),new StableSortingObj(-4),new StableSortingObj(13),new StableSortingObj(-10),new StableSortingObj(0),new StableSortingObj(-32),new StableSortingObj(-43),new StableSortingObj(-5),new StableSortingObj(11),new StableSortingObj(-42),new StableSortingObj(-26),new StableSortingObj(7),new StableSortingObj(5),new StableSortingObj(19),new StableSortingObj(-16),new StableSortingObj(13),new StableSortingObj(-23),new StableSortingObj(-48),new StableSortingObj(-38),new StableSortingObj(-38),new StableSortingObj(-33),new StableSortingObj(-1),new StableSortingObj(-47),new StableSortingObj(-35),new StableSortingObj(-49),new StableSortingObj(-8),new StableSortingObj(18),new StableSortingObj(16),new StableSortingObj(-17)};

    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testBubbleException1() {
        Sorting.bubbleSort(null, new Comp());
    }
    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testBubbleException2() {
        Sorting.bubbleSort(new SortingObj[0], null);
    }
    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testBubbleException3() {
        Sorting.bubbleSort(null, null);
    }

    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testInsertionException1() {
        Sorting.insertionSort(null, new Comp());
    }
    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testInsertionException2() {
        Sorting.insertionSort(new SortingObj[0], null);
    }
    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testInsertionException3() {
        Sorting.insertionSort(null, null);
    }

    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testSelectionException1() {
        Sorting.selectionSort(null, new Comp());
    }
    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testSelectionException2() {
        Sorting.selectionSort(new SortingObj[0], null);
    }
    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testSelectionException3() {
        Sorting.selectionSort(null, null);
    }

    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testQuickException1() {
        Sorting.quickSort(null, new Comp(), new Random());
    }
    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testQuickException2() {
        Sorting.quickSort(new SortingObj[0], null, new Random());
    }
    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testQuickException3() {
        Sorting.quickSort(null, null, new Random());
    }
    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testQuickException4() {
        Sorting.quickSort(new SortingObj[0], new Comp(), null);
    }
    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testQuickException5() {
        Sorting.quickSort(null, new Comp(), null);
    }
    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testQuickException6() {
        Sorting.quickSort(new SortingObj[0], null, null);
    }
    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testQuickException7() {
        Sorting.quickSort(null, null, null);
    }

    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testMergeException1() {
        Sorting.mergeSort(null, new Comp());
    }
    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testMergeException2() {
        Sorting.mergeSort(new SortingObj[0], null);
    }
    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testMergeException3() {
        Sorting.mergeSort(null, null);
    }

    @Test(timeout = TIMEOUT, expected = IllegalArgumentException.class)
    public void testLsdRadixException1() {
        Sorting.lsdRadixSort(null);
    }

    @Test(timeout = TIMEOUT)
    public void testBubblePermutations() {
        StableSortingObj[] sorted = new StableSortingObj[5];
        sorted[0] = new StableSortingObj(0);
        sorted[1] = new StableSortingObj(1);
        sorted[2] = new StableSortingObj(2);
        sorted[3] = new StableSortingObj(2);
        sorted[4] = new StableSortingObj(3);

        StableSortingObj[] working = new StableSortingObj[5];
        StableComp comp = new StableComp();
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.bubbleSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
    }
                
    @Test(timeout = TIMEOUT)
    public void testBubbleLong() {
         StableComp comp = new StableComp();
         StableSortingObj[] sortedStable;
         StableSortingObj[] working;
         sortedStable = Arrays.copyOf(shuffled1Stable, shuffled1Stable.length);
         Arrays.sort(sortedStable, comp);
         working = Arrays.copyOf(shuffled1Stable, shuffled1Stable.length);
         comp.counts = 0;
         Sorting.bubbleSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedStable, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7425 expected", comp.counts <= 7425);
         sortedStable = Arrays.copyOf(shuffled2Stable, shuffled2Stable.length);
         Arrays.sort(sortedStable, comp);
         working = Arrays.copyOf(shuffled2Stable, shuffled2Stable.length);
         comp.counts = 0;
         Sorting.bubbleSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedStable, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7425 expected", comp.counts <= 7425);
         sortedStable = Arrays.copyOf(shuffled3Stable, shuffled3Stable.length);
         Arrays.sort(sortedStable, comp);
         working = Arrays.copyOf(shuffled3Stable, shuffled3Stable.length);
         comp.counts = 0;
         Sorting.bubbleSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedStable, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7425 expected", comp.counts <= 7425);
         sortedStable = Arrays.copyOf(shuffled4Stable, shuffled4Stable.length);
         Arrays.sort(sortedStable, comp);
         working = Arrays.copyOf(shuffled4Stable, shuffled4Stable.length);
         comp.counts = 0;
         Sorting.bubbleSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedStable, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7425 expected", comp.counts <= 7425);
         sortedStable = Arrays.copyOf(shuffled5Stable, shuffled5Stable.length);
         Arrays.sort(sortedStable, comp);
         working = Arrays.copyOf(shuffled5Stable, shuffled5Stable.length);
         comp.counts = 0;
         Sorting.bubbleSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedStable, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7425 expected", comp.counts <= 7425);
    }

    @Test(timeout = TIMEOUT)
    public void testInsertionPermutations() {
        StableSortingObj[] sorted = new StableSortingObj[5];
        sorted[0] = new StableSortingObj(0);
        sorted[1] = new StableSortingObj(1);
        sorted[2] = new StableSortingObj(2);
        sorted[3] = new StableSortingObj(2);
        sorted[4] = new StableSortingObj(3);

        StableSortingObj[] working = new StableSortingObj[5];
        StableComp comp = new StableComp();
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 6 expected", comp.counts <= 6);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 6 expected", comp.counts <= 6);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7 expected", comp.counts <= 7);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7 expected", comp.counts <= 7);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7 expected", comp.counts <= 7);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7 expected", comp.counts <= 7);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 13 expected", comp.counts <= 13);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 13 expected", comp.counts <= 13);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7 expected", comp.counts <= 7);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7 expected", comp.counts <= 7);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 13 expected", comp.counts <= 13);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 13 expected", comp.counts <= 13);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 13 expected", comp.counts <= 13);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 13 expected", comp.counts <= 13);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 13 expected", comp.counts <= 13);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 13 expected", comp.counts <= 13);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 13 expected", comp.counts <= 13);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 13 expected", comp.counts <= 13);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.insertionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
    }
                
    @Test(timeout = TIMEOUT)
    public void testInsertionLong() {
         StableComp comp = new StableComp();
         StableSortingObj[] sortedStable;
         StableSortingObj[] working;
         sortedStable = Arrays.copyOf(shuffled1Stable, shuffled1Stable.length);
         Arrays.sort(sortedStable, comp);
         working = Arrays.copyOf(shuffled1Stable, shuffled1Stable.length);
         comp.counts = 0;
         Sorting.insertionSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedStable, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 3571 expected", comp.counts <= 3571);
         sortedStable = Arrays.copyOf(shuffled2Stable, shuffled2Stable.length);
         Arrays.sort(sortedStable, comp);
         working = Arrays.copyOf(shuffled2Stable, shuffled2Stable.length);
         comp.counts = 0;
         Sorting.insertionSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedStable, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 3795 expected", comp.counts <= 3795);
         sortedStable = Arrays.copyOf(shuffled3Stable, shuffled3Stable.length);
         Arrays.sort(sortedStable, comp);
         working = Arrays.copyOf(shuffled3Stable, shuffled3Stable.length);
         comp.counts = 0;
         Sorting.insertionSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedStable, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 3801 expected", comp.counts <= 3801);
         sortedStable = Arrays.copyOf(shuffled4Stable, shuffled4Stable.length);
         Arrays.sort(sortedStable, comp);
         working = Arrays.copyOf(shuffled4Stable, shuffled4Stable.length);
         comp.counts = 0;
         Sorting.insertionSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedStable, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 3871 expected", comp.counts <= 3871);
         sortedStable = Arrays.copyOf(shuffled5Stable, shuffled5Stable.length);
         Arrays.sort(sortedStable, comp);
         working = Arrays.copyOf(shuffled5Stable, shuffled5Stable.length);
         comp.counts = 0;
         Sorting.insertionSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedStable, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 3975 expected", comp.counts <= 3975);
    }

    @Test(timeout = TIMEOUT)
    public void testSelectionPermutations() {
        SortingObj[] sorted = new SortingObj[5];
        sorted[0] = new SortingObj(0);
        sorted[1] = new SortingObj(1);
        sorted[2] = new SortingObj(2);
        sorted[3] = new SortingObj(2);
        sorted[4] = new SortingObj(3);

        SortingObj[] working = new SortingObj[5];
        Comp comp = new Comp();
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.selectionSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 15 expected", comp.counts <= 15);
    }
                
    @Test(timeout = TIMEOUT)
    public void testSelectionLong() {
         Comp comp = new Comp();
         SortingObj[] working;
         comp.counts = 0;
         working = Arrays.copyOf(shuffled1Obj, shuffled1Obj.length);
         Sorting.selectionSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedObj, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7425 expected", comp.counts <= 7425);
         comp.counts = 0;
         working = Arrays.copyOf(shuffled2Obj, shuffled2Obj.length);
         Sorting.selectionSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedObj, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7425 expected", comp.counts <= 7425);
         comp.counts = 0;
         working = Arrays.copyOf(shuffled3Obj, shuffled3Obj.length);
         Sorting.selectionSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedObj, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7425 expected", comp.counts <= 7425);
         comp.counts = 0;
         working = Arrays.copyOf(shuffled4Obj, shuffled4Obj.length);
         Sorting.selectionSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedObj, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7425 expected", comp.counts <= 7425);
         comp.counts = 0;
         working = Arrays.copyOf(shuffled5Obj, shuffled5Obj.length);
         Sorting.selectionSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedObj, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7425 expected", comp.counts <= 7425);
    }

    @Test(timeout = TIMEOUT)
    public void testQuickPermutations() {
        SortingObj[] sorted = new SortingObj[5];
        sorted[0] = new SortingObj(0);
        sorted[1] = new SortingObj(1);
        sorted[2] = new SortingObj(2);
        sorted[3] = new SortingObj(2);
        sorted[4] = new SortingObj(3);

        SortingObj[] working = new SortingObj[5];
        Comp comp = new Comp();
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(0));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 20 expected", comp.counts <= 20);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(1));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 14 expected", comp.counts <= 14);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(2));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(3));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 22 expected", comp.counts <= 22);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(4));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 14 expected", comp.counts <= 14);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(5));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(6));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 24 expected", comp.counts <= 24);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(7));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 14 expected", comp.counts <= 14);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(8));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 22 expected", comp.counts <= 22);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(9));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(10));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(11));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(12));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(13));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(14));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(15));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(16));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 24 expected", comp.counts <= 24);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(17));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(18));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(19));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(20));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(21));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(22));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(23));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(24));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(25));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 14 expected", comp.counts <= 14);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(26));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(27));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(28));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(29));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 20 expected", comp.counts <= 20);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(30));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(31));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(32));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.quickSort(working, comp, new Random(33));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(34));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(35));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(36));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(37));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(38));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 22 expected", comp.counts <= 22);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(39));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(40));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(41));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 14 expected", comp.counts <= 14);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(42));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(43));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 14 expected", comp.counts <= 14);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(44));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(45));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(46));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(47));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(48));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 22 expected", comp.counts <= 22);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(49));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 20 expected", comp.counts <= 20);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(50));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 24 expected", comp.counts <= 24);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(51));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(52));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(53));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(54));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 20 expected", comp.counts <= 20);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(55));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 26 expected", comp.counts <= 26);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(56));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(57));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(58));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(59));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(60));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 20 expected", comp.counts <= 20);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(61));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(62));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(63));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(64));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(65));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 24 expected", comp.counts <= 24);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(66));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 14 expected", comp.counts <= 14);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(67));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(68));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 22 expected", comp.counts <= 22);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(69));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(70));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(71));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(72));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 14 expected", comp.counts <= 14);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(73));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(74));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(75));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 14 expected", comp.counts <= 14);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(76));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 20 expected", comp.counts <= 20);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(77));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(78));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(79));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 24 expected", comp.counts <= 24);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(80));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(81));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 24 expected", comp.counts <= 24);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(82));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 14 expected", comp.counts <= 14);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(83));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(84));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(85));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(86));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(87));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 14 expected", comp.counts <= 14);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(88));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 22 expected", comp.counts <= 22);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(89));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 14 expected", comp.counts <= 14);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(90));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(91));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(92));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 14 expected", comp.counts <= 14);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.quickSort(working, comp, new Random(93));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 20 expected", comp.counts <= 20);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(94));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(95));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(96));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(97));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(98));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(99));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(100));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(101));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 14 expected", comp.counts <= 14);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(102));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(103));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(104));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(105));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(106));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 24 expected", comp.counts <= 24);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(107));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 16 expected", comp.counts <= 16);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(108));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(109));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 24 expected", comp.counts <= 24);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(110));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(111));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(112));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.quickSort(working, comp, new Random(113));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(114));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 14 expected", comp.counts <= 14);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(115));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(116));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 18 expected", comp.counts <= 18);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(117));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 14 expected", comp.counts <= 14);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.quickSort(working, comp, new Random(118));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 24 expected", comp.counts <= 24);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.quickSort(working, comp, new Random(119));
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 22 expected", comp.counts <= 22);
    }

    @Test(timeout = TIMEOUT)
    public void testQuickLong() {
         Comp comp = new Comp();
         SortingObj[] working;
         comp.counts = 0;
         working = Arrays.copyOf(shuffled1Obj, shuffled1Obj.length);
         Sorting.quickSort(working, comp, new Random(1));
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedObj, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 1182 expected", comp.counts <= 1182);
         comp.counts = 0;
         working = Arrays.copyOf(shuffled2Obj, shuffled2Obj.length);
         Sorting.quickSort(working, comp, new Random(2));
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedObj, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 1314 expected", comp.counts <= 1314);
         comp.counts = 0;
         working = Arrays.copyOf(shuffled3Obj, shuffled3Obj.length);
         Sorting.quickSort(working, comp, new Random(3));
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedObj, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 1280 expected", comp.counts <= 1280);
         comp.counts = 0;
         working = Arrays.copyOf(shuffled4Obj, shuffled4Obj.length);
         Sorting.quickSort(working, comp, new Random(4));
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedObj, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 1170 expected", comp.counts <= 1170);
         comp.counts = 0;
         working = Arrays.copyOf(shuffled5Obj, shuffled5Obj.length);
         Sorting.quickSort(working, comp, new Random(5));
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedObj, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 1178 expected", comp.counts <= 1178);
    }

    @Test(timeout = TIMEOUT)
    public void testMergePermutations() {
        StableSortingObj[] sorted = new StableSortingObj[5];
        sorted[0] = new StableSortingObj(0);
        sorted[1] = new StableSortingObj(1);
        sorted[2] = new StableSortingObj(2);
        sorted[3] = new StableSortingObj(2);
        sorted[4] = new StableSortingObj(3);

        StableSortingObj[] working = new StableSortingObj[5];
        StableComp comp = new StableComp();
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7 expected", comp.counts <= 7);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7 expected", comp.counts <= 7);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7 expected", comp.counts <= 7);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 7 expected", comp.counts <= 7);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 9 expected", comp.counts <= 9);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 10 expected", comp.counts <= 10);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
        comp.counts = 0;
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.mergeSort(working, comp);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sorted, working);
        Assert.assertTrue("Too many compares: " + comp.counts + " when max of 12 expected", comp.counts <= 12);
    }

    @Test(timeout = TIMEOUT)
    public void testMergeLong() {
         StableComp comp = new StableComp();
         StableSortingObj[] sortedStable;
         StableSortingObj[] working;
         sortedStable = Arrays.copyOf(shuffled1Stable, shuffled1Stable.length);
         Arrays.sort(sortedStable, comp);
         working = Arrays.copyOf(shuffled1Stable, shuffled1Stable.length);
         comp.counts = 0;
         Sorting.mergeSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedStable, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 814 expected", comp.counts <= 814);
         sortedStable = Arrays.copyOf(shuffled2Stable, shuffled2Stable.length);
         Arrays.sort(sortedStable, comp);
         working = Arrays.copyOf(shuffled2Stable, shuffled2Stable.length);
         comp.counts = 0;
         Sorting.mergeSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedStable, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 802 expected", comp.counts <= 802);
         sortedStable = Arrays.copyOf(shuffled3Stable, shuffled3Stable.length);
         Arrays.sort(sortedStable, comp);
         working = Arrays.copyOf(shuffled3Stable, shuffled3Stable.length);
         comp.counts = 0;
         Sorting.mergeSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedStable, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 810 expected", comp.counts <= 810);
         sortedStable = Arrays.copyOf(shuffled4Stable, shuffled4Stable.length);
         Arrays.sort(sortedStable, comp);
         working = Arrays.copyOf(shuffled4Stable, shuffled4Stable.length);
         comp.counts = 0;
         Sorting.mergeSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedStable, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 804 expected", comp.counts <= 804);
         sortedStable = Arrays.copyOf(shuffled5Stable, shuffled5Stable.length);
         Arrays.sort(sortedStable, comp);
         working = Arrays.copyOf(shuffled5Stable, shuffled5Stable.length);
         comp.counts = 0;
         Sorting.mergeSort(working, comp);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.deepToString(working), sortedStable, working);
         Assert.assertTrue("Too many compares: " + comp.counts + " when max of 817 expected", comp.counts <= 817);
    }

    @Test(timeout = TIMEOUT)
    public void testLsdRadixPermutations() {
        int[] sorted = new int[5];
        sorted[0] = 0;
        sorted[1] = 1;
        sorted[2] = 2;
        sorted[3] = 2;
        sorted[4] = 3;

        int[] working = new int[5];
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[4];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[3];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[3];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[4];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[2];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[2];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[3];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[2];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[2];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[1];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[0];
        working[2] = sorted[4];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[1];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[1];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[0];
        working[3] = sorted[3];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[1];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[1];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[0];
        working[4] = sorted[2];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[1];
        working[3] = sorted[2];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[0];
        working[1] = sorted[4];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[0];
        working[2] = sorted[3];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[0];
        working[3] = sorted[2];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[0];
        working[4] = sorted[1];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
        working[0] = sorted[4];
        working[1] = sorted[3];
        working[2] = sorted[2];
        working[3] = sorted[1];
        working[4] = sorted[0];
        Sorting.lsdRadixSort(working);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
    }
                
    @Test(timeout = TIMEOUT)
    public void testLsdRadixLong() {
         int[] working;
         working = Arrays.copyOf(shuffled1, shuffled1.length);
         Sorting.lsdRadixSort(working);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
         working = Arrays.copyOf(shuffled2, shuffled2.length);
         Sorting.lsdRadixSort(working);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
         working = Arrays.copyOf(shuffled3, shuffled3.length);
         Sorting.lsdRadixSort(working);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
         working = Arrays.copyOf(shuffled4, shuffled4.length);
         Sorting.lsdRadixSort(working);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
         working = Arrays.copyOf(shuffled5, shuffled5.length);
         Sorting.lsdRadixSort(working);
         Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(working), sorted, working);
    }

    @Test(timeout = TIMEOUT)
    public void testLsdRadixLargeNumbers() {
        int[] arr = Arrays.copyOf(bigNumbers, bigNumbers.length);
        
        Sorting.lsdRadixSort(arr);
        Assert.assertArrayEquals("Array sorted incorrectly: " + Arrays.toString(arr), bigSorted, arr);
    }
    
    @Test(timeout = TIMEOUT)
    public void testEmptyArrays() {
        Sorting.bubbleSort(new SortingObj[0], new Comp());
        Sorting.insertionSort(new SortingObj[0], new Comp());
        Sorting.selectionSort(new SortingObj[0], new Comp());
        Sorting.quickSort(new SortingObj[0], new Comp(), new Random(0));
        Sorting.mergeSort(new SortingObj[0], new Comp());
        Sorting.lsdRadixSort(new int[0]);
    }

    static class SortingObj {
        final int value;

        public SortingObj(int val) {
            this.value = val;
        }

        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            SortingObj that = (SortingObj) o;
            return value == that.value;
        }

        @Override
        public int hashCode() {

            return Objects.hash(value);
        }
        
        @Override
        public String toString() {
            return "" + value;
        }
    }

    static class StableSortingObj {
        final int value;
        final int number;
        private static int count;

        public StableSortingObj(int val) {
            this.value = val;
            number = count++;
        }
        
        @Override
        public String toString() {
            return value + "[" + number + "]"; //Did you know that the only time java will complain about two semicolons is right after the return statement's semicolon? Me neither
        }
    }
    
    static class Comp implements Comparator<SortingObj> {
        public int counts = 0;
        
        public int compare(SortingObj o1, SortingObj o2) {
            counts++;
            return o1.value - o2.value;
        }
    }
    
    static class StableComp implements Comparator<StableSortingObj> {
        public int counts = 0;
        
        public int compare(StableSortingObj o1, StableSortingObj o2) {
            counts++;
            return o1.value - o2.value;
        }
    }
}